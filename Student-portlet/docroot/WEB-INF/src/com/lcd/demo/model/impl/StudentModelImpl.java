/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lcd.demo.model.impl;

import com.lcd.demo.model.Student;
import com.lcd.demo.model.StudentModel;
import com.lcd.demo.model.StudentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lcd.demo.model.StudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Smile
 * @see StudentImpl
 * @see com.lcd.demo.model.Student
 * @see com.lcd.demo.model.StudentModel
 * @generated
 */
@JSON(strict = true)
public class StudentModelImpl extends BaseModelImpl<Student>
	implements StudentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the {@link com.lcd.demo.model.Student} interface instead.
	 */
	public static final String TABLE_NAME = "student";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studentId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "age", Types.INTEGER },
			{ "gender", Types.VARCHAR },
			{ "phone", Types.INTEGER },
			{ "address", Types.VARCHAR },
			{ "fileImage", Types.BIGINT },
			{ "linkImage", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table student (studentId LONG not null primary key,name VARCHAR(75) null,age INTEGER,gender VARCHAR(75) null,phone INTEGER,address VARCHAR(75) null,fileImage LONG,linkImage VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table student";
	public static final String ORDER_BY_JPQL = " ORDER BY student.studentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY student.studentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lcd.demo.model.Student"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lcd.demo.model.Student"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lcd.demo.model.Student"),
			true);
	public static long ADDRESS_COLUMN_BITMASK = 1L;
	public static long GENDER_COLUMN_BITMASK = 2L;
	public static long NAME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Student toModel(StudentSoap soapModel) {
		Student model = new StudentImpl();

		model.setStudentId(soapModel.getStudentId());
		model.setName(soapModel.getName());
		model.setAge(soapModel.getAge());
		model.setGender(soapModel.getGender());
		model.setPhone(soapModel.getPhone());
		model.setAddress(soapModel.getAddress());
		model.setFileImage(soapModel.getFileImage());
		model.setLinkImage(soapModel.getLinkImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Student> toModels(StudentSoap[] soapModels) {
		List<Student> models = new ArrayList<Student>(soapModels.length);

		for (StudentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lcd.demo.model.Student"));

	public StudentModelImpl() {
	}

	public long getPrimaryKey() {
		return _studentId;
	}

	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_studentId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Student.class;
	}

	public String getModelClassName() {
		return Student.class.getName();
	}

	@JSON
	public long getStudentId() {
		return _studentId;
	}

	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	public int getAge() {
		return _age;
	}

	public void setAge(int age) {
		_age = age;
	}

	@JSON
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	public void setGender(String gender) {
		_columnBitmask |= GENDER_COLUMN_BITMASK;

		if (_originalGender == null) {
			_originalGender = _gender;
		}

		_gender = gender;
	}

	public String getOriginalGender() {
		return GetterUtil.getString(_originalGender);
	}

	@JSON
	public int getPhone() {
		return _phone;
	}

	public void setPhone(int phone) {
		_phone = phone;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_columnBitmask |= ADDRESS_COLUMN_BITMASK;

		if (_originalAddress == null) {
			_originalAddress = _address;
		}

		_address = address;
	}

	public String getOriginalAddress() {
		return GetterUtil.getString(_originalAddress);
	}

	@JSON
	public long getFileImage() {
		return _fileImage;
	}

	public void setFileImage(long fileImage) {
		_fileImage = fileImage;
	}

	@JSON
	public String getLinkImage() {
		if (_linkImage == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkImage;
		}
	}

	public void setLinkImage(String linkImage) {
		_linkImage = linkImage;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Student)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Student.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setStudentId(getStudentId());
		studentImpl.setName(getName());
		studentImpl.setAge(getAge());
		studentImpl.setGender(getGender());
		studentImpl.setPhone(getPhone());
		studentImpl.setAddress(getAddress());
		studentImpl.setFileImage(getFileImage());
		studentImpl.setLinkImage(getLinkImage());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	public int compareTo(Student student) {
		int value = 0;

		if (getStudentId() < student.getStudentId()) {
			value = -1;
		}
		else if (getStudentId() > student.getStudentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Student student = null;

		try {
			student = (Student)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		StudentModelImpl studentModelImpl = this;

		studentModelImpl._originalName = studentModelImpl._name;

		studentModelImpl._originalGender = studentModelImpl._gender;

		studentModelImpl._originalAddress = studentModelImpl._address;

		studentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.studentId = getStudentId();

		studentCacheModel.name = getName();

		String name = studentCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			studentCacheModel.name = null;
		}

		studentCacheModel.age = getAge();

		studentCacheModel.gender = getGender();

		String gender = studentCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			studentCacheModel.gender = null;
		}

		studentCacheModel.phone = getPhone();

		studentCacheModel.address = getAddress();

		String address = studentCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			studentCacheModel.address = null;
		}

		studentCacheModel.fileImage = getFileImage();

		studentCacheModel.linkImage = getLinkImage();

		String linkImage = studentCacheModel.linkImage;

		if ((linkImage != null) && (linkImage.length() == 0)) {
			studentCacheModel.linkImage = null;
		}

		return studentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{studentId=");
		sb.append(getStudentId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", fileImage=");
		sb.append(getFileImage());
		sb.append(", linkImage=");
		sb.append(getLinkImage());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.lcd.demo.model.Student");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileImage</column-name><column-value><![CDATA[");
		sb.append(getFileImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkImage</column-name><column-value><![CDATA[");
		sb.append(getLinkImage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Student.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Student.class
		};
	private long _studentId;
	private String _name;
	private String _originalName;
	private int _age;
	private String _gender;
	private String _originalGender;
	private int _phone;
	private String _address;
	private String _originalAddress;
	private long _fileImage;
	private String _linkImage;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private Student _escapedModelProxy;
}